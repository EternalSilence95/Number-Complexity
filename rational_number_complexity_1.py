# -*- coding: utf-8 -*-
"""Rational number complexity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AgFS0H8M1ZlKPHSUa9ZhH0MbDkZkV-WI
"""

pip install primePy

# -*- coding: utf-8 -*-
"""
Created on Thu May 12 16:02:07 2022

@author: saqo2
"""

from primePy import primes
import math
from pylab import *
from fractions import Fraction
f = Fraction(1, 7)
i1 = 10
xresult = [0]
yresult = [float(f)]
def NC(f, i1):
    if(i1 == 0):
        print(f)
    else:
        print()
        print('First number is ',f)
        print()
        m = 0
        while m < i1:
            i2 = primes.factors(f.numerator)
            i3 = primes.factors(f.denominator)
            print('factors of ',f,' are ', i2, 'and inverted ', i3)
            j = []
            j2 = []
            while len(i2) > 0:
                k = Fraction(1, i2.pop())
                j.append(k)
            while len(i3) > 0:
                k2 = Fraction(1, i3.pop())
                j2.append(k2)
            if f.denominator != 1:
                a = abs(f * (sum(j)-sum(j2)))
                b = sum(j) - sum(j2)
            else:
                a = f*sum(j)
                b = sum(j)
            print('Relative complexity is ', b, '=', float(b))
            print('Complexity is ',a)
            print(j)
            print(j2)
            print()
            if a != 0:
               f = a
            else:
               break
            m = m + 1
            xresult.append(m)
            yresult.append(a)
NC(f, i1)  
# figure(dpi=1200)
xlabel('time')    
ylabel('value')  
plot(xresult, yresult, marker='o')
show()

